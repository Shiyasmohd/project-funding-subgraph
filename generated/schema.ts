// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EventCreator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventCreator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EventCreator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EventCreator", id.toString(), this);
    }
  }

  static load(id: string): EventCreator | null {
    return changetype<EventCreator | null>(store.get("EventCreator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdEvents(): Array<string> | null {
    let value = this.get("createdEvents");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get participatedEvents(): Array<string> | null {
    let value = this.get("participatedEvents");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get projects(): Array<string> | null {
    let value = this.get("projects");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get votesLeft(): BigInt {
    let value = this.get("votesLeft");
    return value!.toBigInt();
  }

  set votesLeft(value: BigInt) {
    this.set("votesLeft", Value.fromBigInt(value));
  }

  get completedVotes(): Array<string> | null {
    let value = this.get("completedVotes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get earnings(): BigInt {
    let value = this.get("earnings");
    return value!.toBigInt();
  }

  set earnings(value: BigInt) {
    this.set("earnings", Value.fromBigInt(value));
  }
}

export class FundingEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FundingEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FundingEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FundingEvent", id.toString(), this);
    }
  }

  static load(id: string): FundingEvent | null {
    return changetype<FundingEvent | null>(store.get("FundingEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventCID(): string {
    let value = this.get("eventCID");
    return value!.toString();
  }

  set eventCID(value: string) {
    this.set("eventCID", Value.fromString(value));
  }

  get eventDetails(): string | null {
    let value = this.get("eventDetails");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventDetails(value: string | null) {
    if (!value) {
      this.unset("eventDetails");
    } else {
      this.set("eventDetails", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get prizePool(): BigInt {
    let value = this.get("prizePool");
    return value!.toBigInt();
  }

  set prizePool(value: BigInt) {
    this.set("prizePool", Value.fromBigInt(value));
  }

  get users(): Array<string> | null {
    let value = this.get("users");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get projects(): Array<string> | null {
    let value = this.get("projects");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }
}

export class UserFundingEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserFundingEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserFundingEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserFundingEvent", id.toString(), this);
    }
  }

  static load(id: string): UserFundingEvent | null {
    return changetype<UserFundingEvent | null>(
      store.get("UserFundingEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }
}

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Project must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Project", id.toString(), this);
    }
  }

  static load(id: string): Project | null {
    return changetype<Project | null>(store.get("Project", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get projectCID(): string {
    let value = this.get("projectCID");
    return value!.toString();
  }

  set projectCID(value: string) {
    this.set("projectCID", Value.fromString(value));
  }

  get projectDetails(): string | null {
    let value = this.get("projectDetails");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set projectDetails(value: string | null) {
    if (!value) {
      this.unset("projectDetails");
    } else {
      this.set("projectDetails", Value.fromString(<string>value));
    }
  }

  get amountWon(): BigInt {
    let value = this.get("amountWon");
    return value!.toBigInt();
  }

  set amountWon(value: BigInt) {
    this.set("amountWon", Value.fromBigInt(value));
  }

  get amountWithdrawn(): boolean {
    let value = this.get("amountWithdrawn");
    return value!.toBoolean();
  }

  set amountWithdrawn(value: boolean) {
    this.set("amountWithdrawn", Value.fromBoolean(value));
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    return value!.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get voteCount(): BigInt {
    let value = this.get("voteCount");
    return value!.toBigInt();
  }

  set voteCount(value: BigInt) {
    this.set("voteCount", Value.fromBigInt(value));
  }
}

export class IpfsMetadataDetails extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IpfsMetadataDetails entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IpfsMetadataDetails must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IpfsMetadataDetails", id.toString(), this);
    }
  }

  static load(id: string): IpfsMetadataDetails | null {
    return changetype<IpfsMetadataDetails | null>(
      store.get("IpfsMetadataDetails", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get link(): string {
    let value = this.get("link");
    return value!.toString();
  }

  set link(value: string) {
    this.set("link", Value.fromString(value));
  }
}
